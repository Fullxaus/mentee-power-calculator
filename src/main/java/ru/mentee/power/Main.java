package ru.mentee.power;

import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;

public class Main {

    static class Calculator {
        /**
         * –°–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª
         */
        public int add(int a, int b) {
            return a + b;
        }

        /**
         * –í—ã—á–∏—Ç–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ
         */
        public int subtract(int a, int b) {
            return a - b;
        }

        /**
         * –£–º–Ω–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª
         */
        public int multiply(int a, int b) {
            return a * b;
        }

        /**
         * –î–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ
         * @throws ArithmeticException –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
         */
        public double divide(int a, int b) {
            if (b == 0) {
                throw new ArithmeticException("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å");
            }
            return (double) a / b;
        }
    }

    private static void playGame() {
        Calculator calculator = new Calculator();
        java.util.Scanner scanner = new java.util.Scanner(System.in);

        System.out.println("–Ø –∑–∞–≥–∞–¥–∞–ª –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é. –£–≥–∞–¥–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!");

        int a = (int) (Math.random() * 10) + 1;
        int b = (int) (Math.random() * 10) + 1;
        int operation = (int) (Math.random() * 4);

        int result;
        String operationName;

        switch (operation) {
            case 0:
                result = calculator.add(a, b);
                operationName = "—Å–ª–æ–∂–µ–Ω–∏—è";
                break;
            case 1:
                result = calculator.subtract(a, b);
                operationName = "–≤—ã—á–∏—Ç–∞–Ω–∏—è";
                break;
            case 2:
                result = calculator.multiply(a, b);
                operationName = "—É–º–Ω–æ–∂–µ–Ω–∏—è";
                break;
            default:
                if (b == 0) b = 1; // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                result = (int) calculator.divide(a, b);
                operationName = "–¥–µ–ª–µ–Ω–∏—è (—Ü–µ–ª–∞—è —á–∞—Å—Ç—å)";
                break;
        }

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç " + operationName + " —á–∏—Å–µ–ª " + a + " –∏ " + b + ":");

        int userAnswer = scanner.nextInt();

        if (userAnswer == result) {
            System.out.println("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã! üéâ");
        } else {
            System.out.println("–ù–µ —Å–æ–≤—Å–µ–º! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " + result);
        }
    }

    @Nested
    class CalculatorTest {
        private final Calculator calculator = new Calculator();

        @Test
        @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è")
        void testAdd() {
            assertEquals(8, calculator.add(5, 3));
            assertEquals(0, calculator.add(-5, 5));
            assertEquals(-8, calculator.add(-5, -3));
        }
        // üîé –í–ê–®–ê –ó–ê–î–ê–ß–ê: –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ! üîé
        @Test
        @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è")
        void testSubtract() {
            assertEquals(2, calculator.subtract(5, 3));
            assertEquals(-10, calculator.subtract(-5, 5));
            assertEquals(-2, calculator.subtract(-5, -3));
        }

        @Test
        @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è")
        void testMultiply() {
            assertEquals(15, calculator.multiply(5, 3));
            assertEquals(-15, calculator.multiply(-5, 3));
            assertEquals(15, calculator.multiply(-5, -3));
        }

        @Test
        @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è")
        void testDivide() {
            assertEquals(2.5, calculator.divide(5, 2));
            assertEquals(-2.5, calculator.divide(-5, 2));
            assertEquals(2.5, calculator.divide(-5, -2));
        }

        // üî• –í–ê–®–ê –ó–ê–î–ê–ß–ê: –î–æ–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç! üî•
        @Test
        @DisplayName("–¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å")
        void testDivideByZero() {
            // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            Exception exception = assertThrows(ArithmeticException.class, () -> {
                // –®–∞–≥ 2: –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                calculator.divide(5, 0);
            });

            // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç
            assertEquals("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å", exception.getMessage());
        }
    }





    public static void main(String[] args) {

        System.out.println("üßÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä Java! üßÆ");
        Calculator calculator = new Calculator();

        System.out.println("–°–ª–æ–∂–µ–Ω–∏–µ: 5 + 3 = " + calculator.add(5, 3));
        System.out.println("–í—ã—á–∏—Ç–∞–Ω–∏–µ: 10 - 4 = " + calculator.subtract(10, 4));
        System.out.println("–£–º–Ω–æ–∂–µ–Ω–∏–µ: 6 * 7 = " + calculator.multiply(6, 7));

        try {
            System.out.println("–î–µ–ª–µ–Ω–∏–µ: 20 / 4 = " + calculator.divide(20, 4));
            System.out.println("–î–µ–ª–µ–Ω–∏–µ: 10 / 3 = " + calculator.divide(10, 3));
            // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
             System.out.println("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å: " + calculator.divide(5, 0));
        } catch (ArithmeticException e) {
            System.out.println("–û—à–∏–±–∫–∞: " + e.getMessage());
        }

        System.out.println("\nüéÆ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º!");
        playGame();
    }
}