package ru.mentee.power;

import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import static org.junit.jupiter.api.Assertions.*;


public class CalculatorTest {
    private final Main.Calculator calculator = new Main.Calculator();

    @Test
    @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è")
    void testAdd() {
        assertEquals(8, calculator.add(5, 3));
        assertEquals(0, calculator.add(-5, 5));
        assertEquals(-8, calculator.add(-5, -3));
    }
    // üîé –í–ê–®–ê –ó–ê–î–ê–ß–ê: –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ! üîé
    @Test
    @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è")
    void testSubtract() {
        assertEquals(2, calculator.subtract(5, 3));
        assertEquals(-10, calculator.subtract(-5, 5));
        assertEquals(-2, calculator.subtract(-5, -3));
    }

    @Test
    @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è")
    void testMultiply() {
        assertEquals(15, calculator.multiply(5, 3));
        assertEquals(-15, calculator.multiply(-5, 3));
        assertEquals(15, calculator.multiply(-5, -3));
    }

    @Test
    @DisplayName("–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–µ–Ω–∏—è")
    void testDivide() {
        assertEquals(2.5, calculator.divide(5, 2));
        assertEquals(-2.5, calculator.divide(-5, 2));
        assertEquals(2.5, calculator.divide(-5, -2));
    }

    // üî• –í–ê–®–ê –ó–ê–î–ê–ß–ê: –î–æ–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç! üî•
    @Test
    @DisplayName("–¢–µ—Å—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å")
    void testDivideByZero() {
        // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        Exception exception = assertThrows(ArithmeticException.class, () -> {
            // –®–∞–≥ 2: –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            calculator.divide(5, 0);
        });

        // –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–π —Ç–µ–∫—Å—Ç
        assertEquals("–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å", exception.getMessage());
    }
}
